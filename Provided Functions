function coloredText = formatRSS(title, site, date)
%   function coloredText = formatRSS(title, site, date)
%
%   Colors the text of an new story with HTML
%
%   INPUTS
%   -----------------------------------------------------------------------
%   TITLE (string)              the title of the news story
%       
%   SITE (string)               the site hosting hte news story
%
%   DATE (string)               the date the story was published
%
%
%
%   OUTPUTS
%   -----------------------------------------------------------------------
%   COLOREDTEXT (string)        HMTL string with the title in black
%                               the site in pale pink and the date in pale
%                               blue

% Ben Duong 
% Boston University 
% Spring 2012

    coloredText = ['<HTML>' title ' <FONT COLOR=FF99FF>' site '</FONT> <FONT COLOR=acacFF>' date '</FONT><HTML>'];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function rss = getRSSFeed(ticker)
%   function rss = getRSSFeed(ticker)
%
%   Pulls the RSS feed from Yahoo finance for a specific comapny
%
%
%   INPUTS
%   -----------------------------------------------------------------------
%   TICKER (string)                 the stock ticker or tag of the 
%                                   company to pull information 
%                                   about (case insensitive)    
%
%   OUTPUTS
%   -----------------------------------------------------------------------
%   RSS (vector of structures)      vector of structures where each
%                                   structure holds one new story
%
%   Each structure in RSS has information in this format:
%       
%       RSS -|
%            |- title       : the title of the news story
%            |- link        : the url to the news story
%            |- date        : the date the story was published
%            |- site        : the website the story was published
%

% Ben Duong 
% Boston University 
% Spring 2012

url = 'http://finance.yahoo.com/rss/headline?s=';
url = [url ticker];

xml = xml2struct(url);
nodes = xml.children.children;
stories = nodes(strcmp({nodes.name},'item'));

for ii = length(stories):-1:1
    story = stories(ii).children;
    rss(ii).title = story(strcmp({story.name},'title')).children.data;
    rss(ii).link = story(strcmp({story.name},'link')).children.data;
    rss(ii).date = story(strcmp({story.name},'pubDate')).children.data;
    rss(ii).site = extractSite(rss(ii).link);
end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function stockHistory = getStockHistory(ticker, startMonth, startDay, startYear, freq)
%   function stockHistory = getStockHistory(ticker, startMonth, startDay, startYear, freq)
%   
%   Pulls financial history for a specific company from a given date with
%   a given frequency.
%
%
%   INPUTS
%   -----------------------------------------------------------------------
%   TICKER (string)                 the stock ticker or tag of the 
%                                   company to pull information 
%                                   about (case insensitive)
%
%   STARTMONTH (string)             the month of the start date in the
%                                   range of 0-11 (0 for January) as a
%                                   string
%
%   STARTDAY (string)               the day of the month of the start date
%                                   as a string
%   
%   STARTYEAR (string)              the year of the start date as a string
%
%   FREQ (string)                   the frequency of the data ('d' for
%                                   day, 'm' for month and 'y' for year)
%
%
%   OUTPUTS
%   -----------------------------------------------------------------------
%   STOCKHISTORY                    vector of structures where each
%       (vector of structures)      structure holds the data for one point
%       
%   
%   Each structure in STOCKHISTORY has information in this format:
%
%   STOCKHISTORY(i) -|
%                    |- year            : year of the data point
%                    |- month           : month of the data point
%                    |- day             : day of the data point
%                    |- openPrice       : the opening price that day
%                    |- high            : the high that day
%                    |- low             : the low that day
%                    |- closePrice      : the closing price that day
%                    |- volume          : the volume of securities sold
%                    |                      that day
%                    |- adjustedClose   : the adjusted closing price that
%                                           day
%

% Ben Duong 
% Boston University 
% Spring 2012

url = 'http://ichart.finance.yahoo.com/table.csv?';
url = [url '&s=' ticker];
url = [url '&a=' startMonth];
url = [url '&b=' startDay];
url = [url '&c=' startYear];
url = [url '&g=' freq];
[history, status] = urlread(url);

if (status)
    parsedList = parseHistoryCSV(history);
    parsedList = parsedList(2:end);
    
    regex = buildRegex;
    
    for ii = length(parsedList):-1:1
        stockHistory(ii) = convertToNumeric(extractData(parsedList{ii}, regex));
    end
    
    stockHistory = fliplr(stockHistory);
else
    stockHistory = [];
end

end

function parsedCSV = parseHistoryCSV(csv)

newLines = [0 find(csv == sprintf('\n'))];

parsedCSV = cell(length(newLines)-1, 1);

for ii = 1:length(newLines) - 1
    begin = newLines(ii)+1;
    ending = newLines(ii+1)-1;
    parsedCSV{ii} = csv(begin:ending);
    
end

end

function regex = buildRegex
p{1} = '(?<year>[0-9]+)-(?<month>[0-9]+)-(?<day>[0-9]+)';
p{2} = '(?<openPrice>[0-9\.]+)';
p{3} = '(?<high>[0-9\.]+)';
p{4} = '(?<low>[0-9\.]+)';
p{5} = '(?<closePrice>[0-9\.]+)';
p{6} = '(?<volume>[0-9\.]+)';
p{7} = '(?<adjustedClose>[0-9\.]+)';

regex = p{1};
for ii = 2:length(p);
    regex = [regex ',' p{ii}];
end
end

function data = extractData(string, regex)
data = regexp(string, regex, 'names');
end

function data = convertToNumeric(stringData)
data = stringData;
fields = fieldnames(stringData);

for ii = 1:length(fields)
    field = fields{ii};
    data.(field) = str2num(stringData.(field));
    
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function quote = getStockQuote(ticker)
%   function quote = getStockQuote(ticker)
% 
%   Pulls specific financial data from Yahoo Finance for a 
%   given company.
%
%   INPUTS
%   -----------------------------------------------------------------------
%   TICKER (string)                 the stock ticker or tag of the 
%                                   company to pull information 
%                                   about (case insensitive)
%
%   OUTPUTS
%   -----------------------------------------------------------------------
%   QUOTE (structure)               structure holding information about 
%                                   stock (returns empty if the company
%                                   does not exist)
%   
%   QUOTE contains information about the company's stock in its fields
%
%       QUOTE -|
%              |- name              : The name of the company             
%              |- change            : The change in price in dollars
%              |- percentChange     : The percent change in price
%              |- previousClose     : The previous close amount
%              |- openValue         : The most recent opening price
%              |- dayHigh           : The highest price today
%              |- dayLow            : The lowest price today
%              |- high52            : The highest price in the last 52
%              |                        weeks
%              |- low52             : The lowest price in the last 52 weeks
%              |- percentChange200  : The percent change from the 200 day
%              |                        average
%              |- percentChange50   : The percent change from the 50 day
%              |                        average
%              |- moving50          : The 50 day moving average
%               

% Ben Duong 
% Boston University 
% Spring 2012

%% Pull From URL

%
% Build a url with flags to get specific information
%
url = 'http://finance.yahoo.com/d/quotes.csv?';
url = [url '&s=' ticker];
url = [url '&f=' ];
url = [url 'n'];    % Name
url = [url 'c1'];   % Change
url = [url 'p2'];   % Percent Change
url = [url 'p'];    % Previous Close
url = [url 'o'];    % Open Value
url = [url 'h'];    % Day's High
url = [url 'g'];    % Day's Low
url = [url 'k'];    % 52-week High
url = [url 'j'];    % 52-week Low
url = [url 'm6'];   % Percent Change From 200 Day Average
url = [url 'm8'];   % Percent Change From 50 Day Average
url = [url 'm3'];   % 50 Day Moving Average

[stock status] = urlread(url);

%
% If the company exists, status will be true. If not status is false and 
% we return empty
%
if(status)
    regex = buildRegex;
    quote = convertToNumeric(parseCSV(stock,regex));
else
    quote = [];
end


end

%% Regex Builder
%
% Use regular expressions to parse through the csv returned by Yahoo 
%
function regex = buildRegex
p{1} = '\"?(?<name>[\x23-\x7E !]+)\"?';
p{2} = '(?<change>[N/A0-9\.-+]+)';
p{3} = '\"?(?<percentChange>[-N/A\.0-9+]+)%?\"?';
p{4} = '(?<previousClose>[N/A0-9\.-]+)';
p{5} = '(?<openValue>[N/A0-9\.-]+)';
p{6} = '(?<dayHigh>[N/A0-9\.-]+)';
p{7} = '(?<dayLow>[N/A0-9\.-]+)';
p{8} =  '\"?(?<high52>[-N/A\.0-9]+)\"?';
p{9} =  '\"?(?<low52>[-N/A\.0-9]+)\"?';
p{10} = '(?<percentChange200>[N/A0-9\.-+]+)%?';
p{11} = '(?<percentChange50>[N/A0-9\.-+]+)%?';
p{12} = '(?<moving50>[N/A0-9\.-+]+)';

regex = p{1};
for ii = 2:length(p);
    regex = [regex ',' p{ii}];
end

end

%% Parse CSV
function parsed = parseCSV(csv, regex)
parsed = regexp(csv, regex, 'names');
end


%% Covert To Numeric
%
% Convert any string fields that can be converted to a numeric  
%
function nObj= convertToNumeric(obj)
fields = fieldnames(obj);
nObj = obj;

for ii = 1:length(fields)
    field = fields{ii};
    num = str2num(obj.(field));
    if(~isempty(num))
        nObj.(field) = num;
    end
    
end

end
